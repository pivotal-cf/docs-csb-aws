---
title: Migrating Data to Amazon RDS for an SQL Server Instance
owner: Cloud Service Broker for AWS
---

<strong><%= modified_date %></strong>

This topic tells you how to migrate to an instance of the <%= vars.product_full %> tile from an SQL
Server instance of the
[VMware Tanzu Service Broker for AWS tile](https://network.tanzu.vmware.com/products/aws-services/).

## <a id='about'></a> About Migrating Data to an Amazon RDS for SQL Server Instance

The VMware Tanzu Service Broker for AWS (hereafter referred to as the legacy broker) tile is going
out of support. You must move from instances that the legacy broker created to service instances
that <%= vars.product_short %> created.

The <%= vars.product_short %> plans are configurable. When migrating, examine the configuration of
the plans in use with the legacy broker and create matching plans in <%= vars.product_short %>.

You can use the AWS Data Migration Service (DMS) to migrate data between Amazon RDS instances.
The tool copies data from one database to another. Because the original database is not modified, you
can reverse the migration if you detect any problems. It also enables migration to happen over time.

The DMS is a tool provided as part of AWS.
For more information about AWS DMS, see the [AWS documentation](https://aws.amazon.com/dms/).

### <a id='configuration'></a> Matching Configuration

Both the legacy broker and <%= vars.product_short %> allow you to customize service plans.

Create plans in <%= vars.product_short %> that match the plans used in the legacy broker.
It might be useful to create a test service instance and compare the properties in the AWS console.
For how to configure plans, see
[Configure Services with Cloud Service Broker for AWS](installing-with-aws.html.md.erb#services).

### <a id='migration'></a> Migrating Data

You might want to migrate data from instances created with the legacy broker to instances created
with <%= vars.product_short %>.

> **Important** Migration of data might incur app downtime. The amount of downtime depends on the
> method chosen.

There are many methods for performing data migration, including [AWS DMS](https://aws.amazon.com/dms/),
manual data migration, and methods available from other vendors.

For more information about the data migration process see the documentation for the method that you
choose.

> **Important** The data migration process might create schemas and tables in the target database.
> The new instance created by using <%= vars.product_short %> re-assigns data ownership to the
> `binding_user_group` role when deleting a service key or unbinding an app. This is necessary for
> the system to function properly.

In general, to migrate data:

1. Create an Amazon RDS instance using <%= vars.product_short %>.
2. Replicate the data from a legacy broker instance in the newly created instance.
3. Unbind apps from the legacy broker instance and bind them to the newly created instance.

Establish security processes such as security backups, automation of the replication process, pre-
and post-operations to assess the data integrity, and consider database size, downtimes, engines,
compatibilities, and more.

After the migration is completed you can stop ongoing migration and, if you want, delete the legacy
broker instance.

## <a id='steps'></a> Use AWS DMS to migrate data from a legacy RDS instance

To use AWS DMS to migrate data from an existing legacy RDS instance to <%= vars.product_short %>:

1. Create a new RDS service instance using <%= vars.product_short %> by running:

   ```console
   cf create-service SERVICE-OFFERING SERVICE-PLAN NEW-SERVICE-INSTANCE-NAME
   ```

   Where:

   - `SERVICE-OFFERING` is the name of the RDS service offer selected to match the legacy instance
   - `SERVICE-PLAN` is the name of the RDS service plan created to match the legacy instance
     configuration
   - `NEW-SERVICE-INSTANCE-NAME` is the name of the new RDS service instance

2. Create a service key in the new RDS service by running:

   ```console
   cf create-service-key NEW-SERVICE-INSTANCE-NAME SERVICE-KEY-NAME
   ```

   Where:

   - `NEW-SERVICE-INSTANCE-NAME` is the name of the new RDS service instance
   - `SERVICE-KEY-NAME` is a name that you choose for the service key

3. Get credentials from the service key by running:

   ```console
   cf service-key NEW-SERVICE-INSTANCE-NAME SERVICE-KEY-NAME
   ```

4. Inspect the JSON output for the host name, name, user name, password, and port required to
   configure the data migration target.

### <a id='config-run-aws-dms-srvc'></a> Configure and run the AWS DMS service

To configure and run the AWS DMS service:

1. Create a replication instance using the AWS DMS console. A replication instance performs the
   actual data migration between source and target endpoints. Your instance needs enough storage and
   processing power to perform the tasks that migrate data from your source database to your target
   database.

   To set up replication between the source and target databases, see the
   [AWS documentation](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_GettingStarted.Replication.html).

1. Use the legacy RDS instance as a source for AWS DMS. For how to configure a Microsoft SQL
   Server database as a source for AWS DMS, see the
   [AWS documentation](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.SQLServer.html).

   You need an SQL Server account with appropriate access privileges for the source database to use
   the replication task in AWS DMS. This account must have the `view definition` and `view server state`
   permissions.

   > **Important** The credentials exposed in a binding associated with the legacy RDS instance do
   > not have these privileges. You can use the AWS Master user role with elevated privileges to
   > generate a user to perform this operation. Resetting the password of the AWS Master user role
   > leaves the legacy broker inoperative. After the password is reset, the broker is not able to
   > create a binding or delete them.

   For the limitations on using SQL Server as a source for AWS DMS, see the
   [AWS documentation](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.SQLServer.html#CHAP_Source.SQLServer.Limitations).

1. Use the new RDS instance as a target for AWS DMS. For how to configure a Microsoft SQL Server
   database as a target for AWS DMS, see the
   [AWS documentation](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.SQLServer.html).

   For the limitations on using SQL Server as a target for AWS DMS, see the
   [AWS documentation](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.SQLServer.html#CHAP_Target.SQLServer.Limitations).

   The credentials you obtained from the service key have the necessary permissions for the AWS DMS
   user account that you use to connect to the target SQL Server database.

1. Create a database migration task to migrate data between the source and the target database.
   For instructions, see the [AWS documentation](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_GettingStarted.Replication.html#CHAP_GettingStarted.Replication.Tasks).

1. Verify that your database migration task is finished and query the target database for data.

### <a id='bind-the-app-to-new-si'></a> Bind the app to the new service instance

To bind the app to the new service instance:

1. Update the app to consume the new binding credential format.

   The legacy binding exposes the database name in the credentials block as `database`, whereas the
   binding credentials received from <%= vars.product_short %> exposes the database name as `name`.
   You must update the consuming app to handle the `name` credential property.

2. Disconnect the app from the legacy service binding by running:

   ```console
   cf unbind-service APP-NAME LEGACY-SERVICE-INSTANCE-NAME
   ```

   Where:

   - `APP-NAME` is the app using the old AWS RDS instance.
   - `LEGACY-SERVICE-INSTANCE-NAME` is the name of the VMware Tanzu Service Broker for the
     AWS-brokered RDS instance.

3. Bind the app to the new service instance by running:

   ```console
   cf bind-service APP-NAME NEW-SERVICE-INSTANCE-NAME
   ```

   Where `NEW-SERVICE-INSTANCE-NAME` is the name of the <%= vars.product_short %> service instance
   that you created earlier.

   For example:

   <pre class="terminal">
   $ cf bind-service my-app my-csb-aws-instance
   </pre>

   Because <%= vars.product_short %> creates new credentials at bind time, this creates new binding
   credentials for the app.

4. After the migration finishes, stop continuous migration and remove the legacy service instance.
