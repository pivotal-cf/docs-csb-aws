---
title: Migrating to an Amazon RDS for PostgreSQL (Beta) Instance
owner: Cloud Service Broker for AWS
---

<strong><%= modified_date %></strong>

This topic describes migrating from Amazon Relational Database Service (Amazon RDS) for
PostgreSQL Instance of the VMware Tanzu Service Broker for AWS tile
to the <%= vars.product_full %> tile.


## <a id='about'></a> About Migrating Data to Amazon RDS for PostgreSQL Instance

Because the VMware Tanzu Service Broker for AWS (hereafter: "the legacy broker") tile
is going out of support, it is important to move from PostgreSQL instances that
were created by the legacy broker over to the <%= vars.product_short %>.

The <%= vars.product_short %> plans are configurable. You should examine the configuration of the plans
in use with the legacy broker, and create matching plans in the <%= vars.product_short %>.

The <a href="https://aws.amazon.com/dms/>AWS Data Migration Service ("DMS")</a> can be used to migrate data between
Amazon RDS for PostgreSQL Instances. The tool copies data from one database to another.
Because the original database is not modified, it allows a migration to be easily reversed
if any problems are detected. It also allows migration to happen over time.

The DMS is a tool provided as part of AWS. Refer to the <a href="https://aws.amazon.com/dms">DMS documentation</a>
for more information.


## <a id='configuration'></a> Matching Configuration

Both the legacy broker and the <%= vars.product_short %> allow for customization of service plans.
Create plans in the <%= vars.product_short %> that match the plans used in the legacy broker.
It may be useful to create a test service instance and compare the properties in the AWS console.
For instructions on how to configure plans, see
[Configure Services with Cloud Service Broker for AWS](installing-with-aws.html#services).For instruction on how to 


## <a id='migration'></a> Migrating Data

You may wish to migrate data from instances created with the legacy broker to instances created with the <%= vars.product_short %>.
There are many options for performing data migration which include the [AWS Data Migration Service](https://aws.amazon.com/dms/),
manual data migration, and options available from other vendors.

In general, the data migration steps are:
+ Create a backup of the PosgreSQL instance
+ Create an Amazon RDS for PostgreSQL Instance using the <%= vars.product_short %>.
+ Replicate the data from a legacy broker PostgreSQL instance into the newly created instance.
+ Unbind apps from the legacy broker PostgreSQL instance and bind them to the newly created instance.
+ Once migration is complete, on-going migration may be stopped, and the legacy broker PostgreSQL instance
  may optionally be deleted.

For more information on the migration process, refer to the documentation for the option that you choose.

Below are some detailed steps showing the CloudFoundry commands necessary to use AWS Data Migration Service.

Note that migration of data may incur app downtime. The amount of downtime will depend on the method chosen.

## <a id='steps'></a> Migrate Data to a VMware Tanzu Service Broker for AWS PostgreSQL Instance

To migrate data from an existing legacy PostgreSQL instance to the <%= vars.product_short %>:

1. Create a backup of the legacy PostgreSQL instance.

2. Get credentials for the legacy PostgreSQL instance details by running:

    ```
    cf env APP-USING-LEGACY-SERVICE-INSTANCE
    ```

    Where is `APP-USING-LEGACY-SERVICE-INSTANCE` is the name of an app that is bound to a
    service instance from the legacy broker. Inspect the <code>VCAP_SERVICES</code> JSON
    output to see the hostname, database, username, password, and port which are required
    to configure DMS.

3. Create a new PostgreSQL service instance using <%= vars.product_short %>.

4. Create a service key in the new PostgreSQL service by running:

    ```
    cf create-service-key SERVICE-INSTANCE-NAME SERVICE-KEY-NAME
    ```

    Where `SERVICE-INSTANCE-NAME` is the name of the new PostgreSQL service instance and
    `SERVICE-KEY-NAME` is a name that you choose for the service key.

5. Get credentials from the service key by running:

    ```
    cf service-key SERVICE-INSTANCE-NAME SERVICE-KEY-NAME
    ```

    Inspect the JSON output for the hostname, name, username, password, and port which are required
    to configure data migration.

6. Configure and run data migration according to the documentation of the process you have chosen.

    Note that a data migration process may create schemas and tables without granting access for other users to work with that data.
    This can be resolved by connecting to the database using the credentials used for DMS, and granting the <code>binding_user_group</code>
    access to the schemas and tables.
    Alternatively, if continuous migration (for example, AWS DMS Change Data Capture) mode is not being used, the service key used for data migration may be deleted.
    This will have the effect of re-assigning data ownership to the <code>binding_user_group</code> role, automatically
    giving access to other users.

7. Disconnect the app from the legacy service binding by running:

    ```
    cf unbind-service APP-NAME LEGACY-SERVICE-INSTANCE
    ```

    Where:

    * `APP-NAME` is the app using the PostgreSQL instance.
    * `LEGACY-SERVICE-INSTANCE` is the name of the VMware Tanzu Service Broker for AWS-brokered PostgreSQL instance.

    For example:

    <pre class="terminal">
    $ cf unbind-service my-app my-old-instance
    </pre>

8. Bind the app to the new service instance by running:

    ```
    cf bind-service APP-NAME NEW-SERVICE-INSTANCE
    ```

    Where `NEW-SERVICE-INSTANCE` is the name of the <%= vars.product_short %> service instance
    that you created in step 2 above.

    For example:

    <pre class="terminal">
    $ cf bind-service my-app my-csb-aws-instance
    </pre>

    Because <%= vars.product_short %> creates new credentials at bind time,
    this creates new binding credentials for the app.

9. Restage the app:

    ```
    cf restage APP-NAME
    ```

10. Once you are statisfied that they migration has been sucessful, continious migration (for example, AWS DMS Change Data Capture)
    may be stopped and the legacy service instance may be removed.
