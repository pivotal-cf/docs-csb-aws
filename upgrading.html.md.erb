---
title: Upgrading Cloud Service Broker for AWS
owner: Cloud Service Broker
---

This topic describes how to upgrade <%= vars.product_full %>.

The following sections have information about the [upgrade procedure](#procedure) and [specific details about upgrading to v1.5](#upgrading-specifics).

## <a id="procedure"></a> Upgrade procedure

<p class="note">
  <strong>Note:</strong>If you are upgrading to a version later than v1.0, you might need to upgrade service instances.
   Failure upgrading one or more instances will not result in failure to install the tile. Make sure you check the `deploy-all` errand logs in the
   Change Log to verify no errors occured. See [Upgrade All Service Instances Config](installing-with-aws.html.md.erb#upgrade-all-config)
   for more information on service instance upgrades procedure and troubleshooting.
</p>.

To upgrade the <%= vars.product_short %>:

1. If you are upgrading to a version later than v1.0, you might need to upgrade service instances.
   Before installing the new version, see
   [Upgrade All Service Instances Config](installing-with-aws.html.md.erb#upgrade-all-config).
2. Download the new version of <%= vars.product_short %> from
   [<%= vars.product_network %>](https://network.pivotal.io/products/cloud-service-broker-aws/).
3. Follow the procedure in [Installing with AWS](installing-with-aws.html.md.erb) to configure the tile.
4. Make all the changes described in this topic that are required for the new version, see [Upgrading to 1.5](#upgrading-specifics).
5. Apply changes
6. Check `deploy-all` errand logs for any errors when upgrading the instances.


## <a id="upgrading-instances-instructions"> Upgrading instances

The upgrade has to be performed in each tile upgrade. Instances that haven't been upgraded with this version might not be upgradeable with upcoming versions. For that
reason, it is recommended you check there are no instances pending upgrade before upgrading the tile. You can check instances pending upgrade by checking the last `deploy-all` errand log for the  <%= vars.product_short %>.
Alternatively running the CLI plugin with a --dry-run will output the list of instances pending upgrade. 
If you find instances pending upgrade with any method mentioned above, you can apply the upgrade before trying to upgrade the tile itself. 
For this, simply apply changes (ensure you haven't staged the new version yet) or run the CLI Plugin.

A few notes before commencing instance upgrades:

If **Upgrade all services** is unchecked, service instances are not upgraded during installation, and
the broker might be unable to manage these service instances anymore.
In this case, any operations on those instances (update/bind/unbind/delete) are blocked until the
upgrade is performed. You can run the upgrade task at any time.

If you delete custom plans before upgrading all instances, instaces from those plans won't be upgraded and therefore will become
unmanageable for the broker.
Delete plans at a later step or see [Release Notes for Cloud Service Broker for AWS](release-notes.html)
and [Upgrading Cloud Service Broker for AWS](upgrading.html) to prevent conflicting upgrades.

If **Enable Beta offerings** is unchecked when applying changes, instances from those service offerings will also not be upgraded and therefore will
become unmanageable by the broker. Ensure the **Enable Beta offerings** offering is checked if you have instances from those
offerings you intend to keep updated. 

Once confident all instances are up to date, stage the new version of the tile and make sure you perform all the changes described in [Upgrading to 1.5](#upgrading-specifics).
Check the [Upgrade All Service Instances Config](installing-with-aws.html.md.erb#upgrade-all-config) is correct.

After that, you are ready to upgrade the tile. You can go to Step 5. Apply changes.

The Upgrade all instances task can be perform as many times as needed. Failure to upgrade one or more instances won't result in 
a failure in the tile installation. Review the `deploy all` errand logs to ensure all instances have been upgraded successfully.

If preferred, the task can be run through the CF CLI instead of or in addition to running it through the tile.

### <a id="upgrading-instances-task"> Upgrading instances through the tile

1. Configure the **Upgrade All Servie Instances** task, see [Upgrade All Service Instances Config](installing-with-aws.html.md.erb#upgrade-all-config) for more information
2. Apply Changes
3. Check `deploy-all` logs for failures


### <a id="upgrading-cli-plugin"> Upgrading instances through CLI Plugin

To run the CF CLI plugin:

1. Install the [CF CLI UpgradeAllServices plugin](https://plugins.cloudfoundry.org/#UpgradeAllServices)
2. Follow the [instructions](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin#usage) to run the upgrade

It is recommended that you perform a -dry-run before applying the upgrade to understand what instances are pending upgrade.



## <a id="upgrading-specifics"></a> Upgrading to 1.5

### <a id="aws-redis"></a> Amazon ElasticCache for Redis

The following sections describe changes for Amazon ElastiCache for Redis.

### <a id="aws-redis-old-plans"></a> Restoring brokerpak-provided plans

From this version onwards, Amazon ElasticCache for Redis plans are no longer provided with the brokerpak.
If you have instances that you want to maintain, you must add previously provided plans through the
tile. For more information, see
[Add previously provided pre-configured plans](reference/aws-redis.html.md.erb#old-plans).

### <a id="aws-redis-chng-cust-plns"></a> Changing custom plans

Make the following changes to existing custom plans before upgrading.

#### <a id="chng-cust-plns-redis-ver"></a> Set `redis_version` for the service

If you have custom plans already configured for Redis, you have to review the configuration.
The property `redis_version` was moved from the parameters plan to the required user input parameters,
and you have to maintain the property with the previous value established in your custom plans.

To ensure that no unintended changes happen to your existing instances, maintain the `redis_version`
property using the same value previously defined.
For example, if you created an instance using v6.0 of Redis, your plan must look like this:

```json
    {
        "name": "my-custom-plan",
        "id": "5d1763cb-2a39-48c6-955d-ff519cf16d6c",
        "description": "My custom plan Redis 6.0 with cache.t3.medium and 1 node.",
        "cache_size": 2,
        "redis_version": "6.0",
        "node_count": 1,
        "at_rest_encryption_enabled": false,
        "metadata": {
            "displayName": "My Custom Plan",
            "bullets": ["Redis 6.0", "cache.t3.medium", "1 node"]
        }
    }
```

#### <a id="chng-cust-plns-cache-size"></a> Consider replacing `cache_size` with `node_type`

The property `cache_size` is now deprecated.
Consider replacing it with its equivalent `node_type`. For more information, see
[Configuration Parameters](reference/aws-redis.html.md.erb#cache-size-node-type).

Specifying `node_type` in a plan prevents any existing or future service from passing `node_type` as
a service-specific configuration parameter.
This has strong implications for existing plans because existing services might become unmanageable
if they specified a custom `node_type` when they were created.

When in doubt, keep using `cache_size` for existing plans and start using `node_type` for any new
plans.

For more information about node types and pricing, see the
[AWS documentation](https://aws.amazon.com/elasticache/pricing/) and
[Choosing your node size](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).

#### <a id="chng-cust-plns-rest-encry"></a> Set `at_rest_encryption_enabled` to `false`

The recently added `at_rest_encryption_enabled` property is `true` by default.

Because previously created instances cannot be modified to use encryption at rest, set the property
`at_rest_encryption_enabled` to `false` in existing plans to match service instances that have already
been created.

#### <a id="multi-az-enab-to-false"></a> Set `multi_az_enabled` to `false`

The recently added `multi_az_enabled` property is `true` by default.

Because previously created instances cannot be modified to use Multi-AZ, set the property
`multi_az_enabled` to `false` in existing custom plans to match service instances that have already
been created.

