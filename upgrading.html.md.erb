---
title: Upgrading Cloud Service Broker for AWS
owner: Cloud Service Broker
---

This topic describes how to upgrade <%= vars.product_full %>.

## <a id="upgrade-to-1-2-0"></a> Upgrading to v1.3.0


### <a id="rds-mysql"></a> Amazon RDS for MySQL

### <a id="rds-mysql-ssl"></a> Insecure connections are not longer Supported

Every connection in RDS MySQL instances must use TLS encryption.
This change is applied to previously existing instances after upgrading or binding recreation.
For connections (including binding creation) to continue working, the AWS certificate bundle must be installed in <%= vars.ops_manager %>.

#### <a id="rds-mysql-old-plans"></a> Restoring brokerpak-provided plans

From this version onwards, MySQL plans are no longer provided with the brokerpak.
If you have Amazon RDS for MySQL instances that you want to maintain, you must add previously
provided plans through the tile.
For more information, see
[Add previously provided pre-configured plans](reference/aws-mysql.html.md.erb#old-plans).

If you instead want to delete all previously created Amazon RDS for MySQL service instances,
you must delete them before upgrading <%= vars.product_short %> to this version.

To remove the instances from the broker, run:

```console
cf delete-service SERVICE-NAME
```

To remove instances from Cloud Foundry, but retain them in the IaaS, run:

```console
cf purge-service-instance
```

<p class="note caution">
  <strong>Caution:</strong> You cannot edit plan properties during a provision or update operation.
</p>

#### <a id="rds-mysql-custom-plans"></a> Changing custom plans

If you have custom plans already configured for MySQL, you must change the configuration.
This is because the new `storage_type` property is `io1` by default, which attempts to move all
service instances into a new storage type from the general purpose (gp2) type that they are on
currently.

To ensure that no unintended changes happen to your existing instances, add the `storage_type`
property to your plan. For example:

```json
  {
    "name": "my-custom-plan",
    "id": "dd448d6e-1d71-11ed-9974-77a0c9ef0141",
    "description": "Custom plan",
    "cores": 2,
    "storage_gb": 5,
    "mysql_version": 5.7,
    "storage_type": "gp2"
  }
```

If you decide to change your old plans to use the io1 value, set `storage_gb` to at least 100&nbsp;GB,
because this is the minimum value that this type of disk supports.
For more information, see the [AWS documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html).

When you update to the latest broker, all existing instances are upgraded to have storage encryption, Multi-AZ, and storage autoscaling activated.
To deactivate these settings, edit the custom plans configured for MySQL to add the `storage_encrypted`,
`multi_az`, and `storage_autoscale` properties with the value `false` before you upgrade the broker. For example:

```json
  {
    "name": "my-custom-plan",
    "id": "dd448d6e-1d71-11ed-9974-77a0c9ef0141",
    "description": "Custom plan",
    "cores": 2,
    "storage_gb": 5,
    "mysql_version": 5.7,
    "storage_encrypted": false,
    "multi_az": false,
    "storage_autoscale": false
  }
```

Finally, if you have configured old plans where the property `use_tls` was included, the plans must be modified removing the property.

### <a id="aurora-postgres"></a> Amazon Aurora PostgreSQL-Compatible Edition (Beta)

### <a id="aurora-postgres-ssl"></a> Insecure connections from the broker are not longer Supported

Cloud Service Broker connections to Aurora PostgreSQL instances must use TLS encryption.
For bind/unbind to work, the AWS certificate bundle must be installed in <%= vars.ops_manager %>.

## <a id="procedure"></a> Upgrade procedure

To upgrade the <%= vars.product_short %> to a later version:

1. Download the new version of <%= vars.product_short %> from [<%= vars.product_network %>](https://network.pivotal.io/products/cloud-service-broker-aws/).
1. Follow the procedure in [Installing with AWS](installing-with-aws.html.md.erb) to configure the tile.
1. If you are upgrading to a version later than v1.0, service instances might need to be upgraded.
Before installing the new version, see
[Upgrade All Service Instances Config](installing-with-aws.html#upgrade-all-config).
