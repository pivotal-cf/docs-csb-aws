---
title: Upgrading Cloud Service Broker for AWS
owner: Cloud Service Broker
---

This topic tells you how to upgrade <%= vars.product_full %>. The following sections have
information about the [Upgrade procedure](#procedure), [Upgrading service instances](#upgrade-instances),
and specific details about [Upgrading to v1.5](#upgrading-specifics).

## Pre-Upgrade procedure

<p class="note important">
<span class="note__title">Before upgrading, it is crucial to perform the checks suggested in this section.</span>
  Failure to do so could cause the upgrade process to fail and leave the broker unable to manage your instances.
</p>

* **Check if services are up-to-date**
  Execute the command:

   ```shell
   cf upgrade-all-services BROKER-NAME -check-up-to-date
   ```
  This command checks whether all services provided by the specified broker are up-to-date.
  An instance is considered not up-to-date if it is pending upgrade, or if it is an orphaned service instance.

* **Check for orphaned service instances**
  For greater granularity, you can specifically check only orphan service instances by running this command:

   ```shell
   cf upgrade-all-services BROKER-NAME -check-deactivated-plans
   ```
  This checks for any service instances still using plans that have been deactivated.
  More details can be found in the [Managing orphaned service instances documentation](./managing_orphaned_service_instances.html.md.erb).


## <a id="procedure"></a> Upgrade procedure

>**Important**
>When upgrading <%= vars.product_short %>, service instances might need
   to be upgraded.
   Failure to upgrade one or more instance does not cause the tile installation to fail.

>Review the `deploy-all` errand logs in the change log to verify that
   no errors occurred when upgrading instances.

To upgrade <%= vars.product_short %>:

1. Before you stage the new tile version,
   [verify that all service instances are up to date](#upgrade-instances).

2. Download the new version of <%= vars.product_short %> from
   [<%= vars.product_network %>](https://network.tanzu.vmware.com/products/cloud-service-broker-aws/).

3. Stage and configure the tile by following the instructions in
   [Installing with AWS](installing-with-aws.html.md.erb).

4. Make all the changes described in [Upgrading to v1.5](#upgrading-specifics).

5. Verify that your configuration complies with the
   [important notes about upgrading service instances](#upgrade-notes), especially regarding upgrade all instances config, plans
   and beta offerings.

6. Go to the <%= vars.ops_manager %> Installation Dashboard.

7. Click **Review Pending Changes** and then click **Apply Changes**.

8. Review the `deploy-all` errand logs for any errors created because of the upgrade instances task.

## <a id="upgrade-instances"></a> Verify that service instances are up to date before upgrading the tile

Service instances that haven't been upgraded with one version of the tile might not be upgradable by
a newer version.
For this reason, verify that there are no service instances pending upgrade before staging the new version of the tile.

You can see if there are instances with a pending upgrade by reviewing the `deploy-all` errand
log for <%= vars.product_short %>. Alternatively, you can
[verify that all instances are up to date with the CLI plug-in](#checking-cli-plugin)
and the `-dry-run` flag, which outputs the list of instances pending upgrade.

You can see whether there are instances with a pending upgrade by using the CLI plug-in.
For more information, see [ensuring all instances are up to date with the CLI plug-in](#checking-cli-plugin).

If you find instances that are pending upgrade, follow the upgrading instructions for your current
version.

### <a id="upgrade-notes"></a> Important notes about upgrading service instances

Before you start upgrading service instances, see the following notes:

- **Enabling the Upgrade all services check box:**

  If the **Upgrade all services** check box is not selected, service instances are not upgraded
  during installation. These instances become unmanageable by the broker.
  Any operations on that instance, such as update, bind, unbind, or delete, are blocked
  until you run the upgrade task.
  You can run the upgrade task at any time before upgrading the product to a later version.
  See [Upgrade All Service Instances configuration](installing-with-aws.html.md.erb#upgrade-all-config) for information
  on how to configure this task.
  Alternatively you can run the upgrade at a later stage using the [CLI plug-in](#upgrading-cli-plugin)

- **Enabling the Enable Beta offerings check box:**

  If the **Enable Beta offerings** check box is not selected when applying changes, instances from
  those service offerings are not upgraded. These instances become unmanageable by the broker.
  Verify that the **Enable Beta offerings** check box is selected if you have instances from those
  offerings that you intend to keep updated.

- **Deleting custom plans:**

  If you delete custom plans before upgrading all instances, instances from these plans are not
  upgraded. These instances become unmanageable by the broker. Delete plans after upgrading all
  instances, or see [Release Notes for Cloud Service Broker for AWS](release-notes.html.md.erb) and
  [Upgrading to v1.5](#upgrading-specifics) to prevent conflicting upgrades.

- **Only upgrade the tile after all service instances are up to date:**

  You can run the upgrade all instances task as many times as needed.
  If preferred, you can run the upgrade all instances task by using the cf CLI instead of,
  or in addition to, running it through the tile.
  Failure to upgrade one or more instances does not cause the tile installation to fail.
  Review the `deploy all` errand logs to verify that all instances have upgraded.

### <a id="checking-cli-plugin"></a> Verify that all instances are up to date with the CLI plug-in

To verify that no instances are pending upgrade:

1. Install the [cf CLI UpgradeAllServices plugin](https://plugins.cloudfoundry.org/#UpgradeAllServices).
1. Follow the instructions in the **Usage** section of the `README` in the
   [upgrade-all-services-cli-plugin](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin#usage)
   GitHub repository to perform a `check-up-to-date` command.

   `check-up-to-date` example:

   ```shell
   cf upgrade-all-services BROKER-NAME -check-up-to-date
   ```

   These command provide a list, from enabled plans, of instances that are pending upgrades, and a list of
   orphaned service instances that belong to deactivated plans.
   Manage all the instances listed before attempting a tile upgrade.

### <a id="upgrading-cli-plugin"></a> Upgrade instances through the CLI plug-in

To run the cf CLI plug-in:

1. Install the [cf CLI UpgradeAllServices plugin](https://plugins.cloudfoundry.org/#UpgradeAllServices).
1. To run the upgrade, follow the instructions in the **Usage** section of the `README` in the
   [upgrade-all-services-cli-plugin](https://github.com/cloudfoundry/upgrade-all-services-cli-plugin#usage)
   GitHub repository.

   For example:

   ```shell
   cf upgrade-all-services BROKER-NAME
   ```

Run the CLI plug-in with the `-dry-run` flag before applying the service instance upgrade to find
out which instances are pending upgrade.

## <a id="upgrading-specifics"></a> Upgrading to 1.5

### <a id="aws-redis"></a> Amazon ElasticCache for Redis

The following sections describe changes for Amazon ElastiCache for Redis.

### <a id="aws-redis-old-plans"></a> Restoring brokerpak-provided plans

From this version onwards, Amazon ElasticCache for Redis plans are no longer provided with the brokerpak.
If you have instances that you want to maintain, you must add previously provided plans through the
tile. For more information, see
[Add previously provided pre-configured plans](reference/aws-redis.html.md.erb#old-plans).

### <a id="aws-redis-chng-cust-plns"></a> Changing custom plans

Make the following changes to existing custom plans before upgrading.

#### <a id="chng-cust-plns-redis-ver"></a> Set `redis_version` for the service

If you have custom plans already configured for Redis, you have to review the configuration.
The property `redis_version` was moved from the parameters plan to the required user input parameters,
and you have to maintain the property with the previous value established in your custom plans.

So there are no unintended changes to your existing instances, maintain the `redis_version`
property using the same value previously defined.
For example, if you created an instance using v6.0 of Redis, your plan must look like this:

```json
    {
        "name": "my-custom-plan",
        "id": "5d1763cb-2a39-48c6-955d-ff519cf16d6c",
        "description": "My custom plan Redis 6.0 with cache.t3.medium and 1 node.",
        "cache_size": 2,
        "redis_version": "6.0",
        "node_count": 1,
        "at_rest_encryption_enabled": false,
        "metadata": {
            "displayName": "My Custom Plan",
            "bullets": ["Redis 6.0", "cache.t3.medium", "1 node"]
        }
    }
```

#### <a id="chng-cust-plns-cache-size"></a> Consider replacing `cache_size` with `node_type`

The property `cache_size` is now deprecated.
Consider replacing it with its equivalent `node_type`. For more information, see
[Configuration Parameters](reference/aws-redis.html.md.erb#cache-size-node-type).

Specifying `node_type` in a plan prevents any existing or future service from passing `node_type` as
a service-specific configuration parameter.
This has strong implications for existing plans because existing services might become unmanageable
if they specified a custom `node_type` when they were created.

When in doubt, keep using `cache_size` for existing plans and start using `node_type` for any new
plans.

For more information about node types and pricing, see the
[AWS documentation](https://aws.amazon.com/elasticache/pricing/) and
[Choosing your node size](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).

#### <a id="chng-cust-plns-rest-encry"></a> Set `at_rest_encryption_enabled` to `false`

The recently added `at_rest_encryption_enabled` property is `true` by default.

Because previously created instances cannot be modified to use encryption at rest, set the property
`at_rest_encryption_enabled` to `false` in existing plans to match service instances that have already
been created.

#### <a id="multi-az-enab-to-false"></a> Set `multi_az_enabled` to `false`

The recently added `multi_az_enabled` property is `true` by default.

Because previously created instances cannot be modified to use Multi-AZ, set the property
`multi_az_enabled` to `false` in existing custom plans to match service instances that have already
been created.
