---
title: Troubleshooting Cloud Service Broker for AWS
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic gives you troubleshooting information for <%= vars.product_full %>.

## <a id="troubleshoot-errors"></a> Troubleshoot errors

Start here if you have a specific error or error messages.

### <a id="common-services-errors"></a> Common services errors

The following errors can occur in multiple services:

<ul>
    <li>
        <a href="#recreate-instance-update-operation">Broker trying to recreate the instance when updating it</a>
    </li>
    <li>
        <a href="#recreate-instance-plan-change">Broker trying to recreate the instance when changing plan</a>
    </li>
</ul>

<div id="recreate-instance-update-operation" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when updating it</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>The update request for a field is failing because one of the following is true:
                <ul>
                <li>The field cannot be updated</li>
                <li>The new value for a property, or combination of properties, would cause an instance recreation</li>
                </ul>
                The failing update request might be an indication of an out-of-band update performed
                on the instance.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>An out-of-band upgrade of the Redis version to a newer major version causes the
                broker to try to downgrade to the previous version, which causes instance recreation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                        <li>If the property can be updated, pass the parameter in the update
                        request to match the IaaS configuration.</li>
                        <li>If the property can be updated, but specified in the instance plan, then
                        possible solutions include:<br>
                            <ul>
                                <li>Rolling back the change in the IaaS</li>
                                <li>Changing the value in the instance plan</li>
                            </ul>
                        </li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="recreate-instance-plan-change" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when changing plan</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update plan</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                    The update request for the plan is failing because the new plan contains
                    incompatible property values.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>
                    Execute the plan update operation for Redis by setting a version of Redis earlier
                    than the previously created instance.
                    The downgrade of the version is not allowed because it involves the recreation of
                    the instance.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Update the instance to a plan with the compatible values.
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="redis-errors"></a> Amazon ElastiCache for Redis errors

The following errors can occur in Amazon ElastiCache for Redis:

- [Invalid Parameter Group](#redis-invalid-parameter-group)
- [Snapshotting state while adding or removing
  nodes](#redis-scale-nodes-snapshotting)
- [Unable to create instance without specifying minor version (redis 7
  only)](#redis-auto-minor-upgrade-version-7)

<div id="redis-invalid-parameter-group" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Invalid Parameter Group</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>InvalidParameterCombination</code></li>
                  <li><code>InvalidParameterValue</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The value of <code>parameter_group_name</code> points to a parameter group that is
                  not compatible with the version of Redis specified in <code>redis_version</code>.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                    <li>Set the <code>parameter_group_name</code> to <code>""</code> so that the default is used.</li>
                    <li>Set the <code>parameter_group_name</code> to a parameter group whose family matches the Redis version.</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="redis-scale-nodes-snapshotting" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Snapshotting state while adding or removing nodes</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:<br>
                  <code>unexpected state 'snapshotting', wanted target 'available'.</code>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  An AWS snapshot was started during the operation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Retry the operation.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="redis-auto-minor-upgrade-version-7" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Unable to create instance without specifying minor version (redis 7 only).</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>InvalidParameterCombination: Cannot find version 7.x for redis</code></li>
                  <li><code>engine_version: Redis versions must match major.minor when using version 6 or higher</code></li>.
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  There is an [underlying error in AWS API](https://github.com/hashicorp/terraform-provider-aws/issues/27918) preventing this scenario.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                    <li>Unfortunately there is no workaround. Specify a minor version when using Redis version 7 and set auto_minor_version_upgrade to false.</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="rds-general-errors"></a> Amazon general RDS errors

The following errors can occur in any Amazon RDS instance:

- [Reaching AWS subnets quota in a subnet group for
  RDS](#reaching-aws-subnets-quota)
- [Major engine version should be specified when auto_minor_version_upgrade is
  enabled](#engine-version-post-condition-failed)
- [Engine version not found when using a major
  version](#cannot-find-engine-version)
- [Incompatible network state](#incompatible-network-state)
- [Unreachable publicly accessible DB](#publicly-accessible-unreachable)

<div id="reaching-aws-subnets-quota" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Reaching AWS subnets quota in a subnet group for RDS</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>DBSubnetQuotaExceededFault</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  There is a resource quota for AWS called Subnets per DB subnet group that establishes the maximum
                  number of subnets per DB subnet group to each supported region to 20.
                  <br>
                  When operators/developers do not supply an existing subnet group in the plan or provision time,
                  the CSB creates a subnet group. The CSB adds all the present subnets in the specified VPC
                  to the new subnet group. For example, let’s say the operator:
                    <ul>
                        <li>Specifies a VPC with 25 subnets through the tile.</li>
                        <li>Does not specify a DB subnet group in the plan.</li>
                        <li>Does not specify a DB subnet group at provisioning time.</li>
                    </ul>
                  Then the CSB creates a DB subnet group and adds <strong>all</strong> subnets, 25 in this example,
                  to the DB subnet group. Hence, this operation breaches the AWS resource quota.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Create a custom DB subnet group through the AWS console and add the desired subnets for RDS
                    instances to use. Then use the DB subnet group name as a plan or provision parameter.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="engine-version-post-condition-failed" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Major engine version should be specified when auto_minor_version_upgrade is enabled</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li>
                    <code>
                        Resource postcondition failed ............
                        ..........................................
                        A Major engine version should be specified when auto_minor_version_upgrade is enabled.
                        Expected engine version: x.x - got: x.x.x
                    </code>
                  </li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  A business rule prevents you from creating or updating an RDS instance with a configuration that
                  enables auto_minor_version_upgrade and does not select a major engine version. AWS automatically upgrades the minor versions, but you must pick a major version.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Create or update your RDS instance with either auto minor version upgrade deactivated or auto minor
                  version upgrade enabled but selecting a <strong>major engine version</strong>.
                  <br>
                  To know what is the major version, you can run the following command:
                  <code>
                    aws rds describe-db-engine-versions  --engine aurora-mysql --engine-version 5.7.mysql_aurora.2.02.3 --include-all --region us-west-2 | jq -r '.DBEngineVersions[] | { engine_version: .EngineVersion, major_version: .MajorEngineVersion }'
                  </code>
                    You should substitute the engine, aurora-mysql, and the engine version, 5.7.mysql_aurora.2.02.3, with the desired values.
                </td>
            </tr>
        </tbody>
    </table>
</div>


<div id="cannot-find-engine-version" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Engine version not found when using a major version</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                    <li>
                        <code>
                            InvalidParameterCombination: Cannot find version (minor engine version x.x.x) for (specific engine)
                        </code>
                    </li>
                    <li>Example: <code>InvalidParameterCombination: Cannot find version 8.0.mysql_aurora.3.04.0 for aurora-mysql</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The AWS API cannot eventually find a minor version within its catalog.
                  Various causes can induce this error, such as:
                    <ul>
                        <li>Limited version pool just before the release of a new minor version..</li>
                        <li>Eventual inconsistency between the read API and write API.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Create or update your RDS instance with auto minor version upgrade deactivated and select a
                  <strong>specific minor engine version</strong>.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="incompatible-network-state" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>incompatible-network state</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>incompatible-network</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  An incompatible-network state indicates one or more of the following is true of the Amazon RDS DB instance:
                    <ul>
                        <li>There are no available IP addresses in the subnet that the Amazon RDS DB instance was launched into.</li>
                        <li>The subnet used in the Amazon RDS DB subnet group no longer exists in the Amazon Virtual Private Cloud (Amazon VPC).</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    AWS does not make any guarantees as to what subnet from the subnet group an RDS instance is
                    launched in. Although you can assume it is going to balance new instance creation among
                    all the subnets in the group, in reality, this doesn't happen. This means one subnet in the
                    group can run out of IPs, while the others are widely unused.
                    To work around this issue, create a custom DB subnet group through the AWS console and
                    choose the subnets that still have available IP addresses from the navigation pane.
                    Then use the DB subnet group name as a plan or provision parameter.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="publicly-accessible-unreachable" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Unreachable publicly accessible DB</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  All following conditions must be occurring:
                    <ul>
                        <li>Service instance is currently configured with property <code>publicly_accessible: true</code>.</li>
                        <li>The database is not reachable from outside your TAS foundation.</li>
                        <li>Apps within your TAS foundation can connect without issues using a service binding.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  Several factors may contribute to the appearance of this error:
                    <ul>
                        <li>
                          The service instance ended up associated to an unexpected VPC.<br>
                          Pitfall: when <code>aws_vpc_id</code> is left blank the service instance is created in whatever VPC is specified in the Tile's config.<br>
                          <i>Or in <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">AWS' default VPC</a> when not specified.</i>
                        </li>
                        <li>
                          The service instance ended up associated to some unexpected subnets.<br>
                          Pitfall: when <code>rds_subnet_group</code> is left blank the service instance is associated to whatever subnet group is specified in the Tile's config.<br>
                          <i>A new subnet group containing all subnets present in the VPC is created and assigned to the service instance when not specified.</i>
                        </li>
                        <li>
                          The service instance ended up associated to an unexpected security group.<br>
                          Pitfall: when <code>rds_vpc_security_group_ids</code> is left blank the service instance is associated to whatever subnet group is specified in the Tile's config.<br>
                          <i>A new security group allowing all ingress traffic but no egress traffic is created and assigned to the service instance when not specified.</i>
                        </li>
                        <li>
                          The subnet group associated to the service instance contains some private subnets.<br>
                          <i>Pitfall: according to AWS official docs, <quote>for a DB instance to be publicly accessible, all of the subnets in its DB subnet group must be public.</quote></i>
                        </li>
                        <li>
                          The security groups associated to the service instance are missing some rules to allow routing your external traffic, or some rules are conflicting with one another.
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Recommendations</td>
                <td>
                  For service plans creators:
                    <ul>
                        <li>
                          Explicitly specify <code>aws_vpc_id</code>, <code>rds_subnet_group</code> and <code>rds_vpc_security_group_ids</code> in the plan.<br>
                          Currently, there is no way to specify at plan level that a property is mandatory and can't be left empty when creating an instance,
                          so if your use case doesn't allow you to set these fields in the plan please keep in mind the pitfalls listed in <b>Cause</b> section above.
                        </li>
                        <li>Set <code>publicly_accessible: false</code> if your VPC, subnets and security groups are not designed with public DBs in mind or if you want to disallow them.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ol>
                        <li>Check if explicitly specifying <code>aws_vpc_id</code>, <code>rds_subnet_group</code> and <code>rds_vpc_security_group_ids</code> solves the issue.</li>
                        <li>If any of these fields are enforced by the plan, ask maintainers of the plan if they support public databases.</li>
                        <li>Check if you have correctly configured your <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html">Security group rules</a>.</li>
                        <li>Check if you have correctly configured your <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Subnets">DB subnet group</a>.</li>
                    </ol>
                </td>
            </tr>
        </tbody>
    </table>
</div>


### <a id="postgres-errors"></a> Amazon PostgreSQL errors

The following errors can occur in any Amazon PostgreSQL instance:

- [User does not have permission for table](#postgres-binding-issue)

<div id="postgres-binding-issue" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>User does not have permission for tables created by other user in the PUBLIC schema</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>Bindings modifying/reading tables created by other bindings in the PUBLIC schema</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors mentioning lack of permissions/ownership:
                  <ul>
                  <li><code>must be owner of table</code></li>
                  <li><code>permission denied for table</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The Cloud Foundry binding model implies that multiple bindings can query
                  or edit the same tables. This is particularly useful for rotating credentials where
                  unbind and bind operations are needed. Additionally, the broker does not support
                  creating bindings with different levels of access to the objects created. This means that
                  all bindings need the same access to all objects and can query and edit them regardless
                  of what binding created them in the first place.
                  This conflicts with the PostgreSQL permission model, where the user that created an object is the owner
                  and is the only one who can edit tables and query them, unless permission is explicitly granted to other
                  roles.
                  This applies for bindings and service keys.

                  <br>
                  Specifically, the following issues can happen:
                    <ul>
                        <li>Binding A not having access to a table that binding B created, when binding B created the table after binding A was created.</li>
                        <li>Binding A cannot read tables created by binding B until a new binding C is created.</li>
                        <li>Binding A cannot change tables created by binding B until binding B is deleted (unbound from its app).</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                All the database users created when binding and creating service keys with Tanzu Cloud Service Broker for AWS are assigned the role <code>binding_user_group</code>. This implies
                they all have access to tables created by the <code>binding_user_group</code> role.
                Creating any objects with the <code>binding_user_group</code> role instead of the binding user resolves any of the issues mentioned here.
                You can achieve this by running <code>SET ROLE binding_user_group</code> before any other instruction in the SQL script that creates your object or framework performing database migrations.

                If you have issues with tables already created, you must either:
                    <ol>
                        <li>Unbind the application that has created the objects and bind again (or delete the service key that has created the objects). This is because when unbinding, Tanzu Cloud Service Broker for AWS automatically transfers ownership of existing objects to the <code>binding_user_group</code> role.</li>
                        <li>Manually transfer ownership to the <code>binding_user_group</code> with the following statement "ALTER TABLE tab_name OWNER TO binding_user_group;". You must run this statement after logging in to the database with the credentials from the binding/service key used to create the objects.</li>
                        <li>If you only need other bindings to perform data operations, you can create new bindings for interacting with these objects. This is because Tanzu Cloud Service Broker for AWS assigns permissions to all existing tables whenever a new binding is created. However, this new binding does not have permissions to perform DDL operations until points 1. or 2. are implemented.</li>
                    </ol>
                </td>
            </tr>
        </tbody>
    </table>
</div>
