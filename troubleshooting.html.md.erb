---
title: Troubleshooting Cloud Service Broker for AWS
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic gives you troubleshooting information for <%= vars.product_full %>.

## <a id="install-errors"></a> Tile installation errors

The following error can occur during the `apply changes` stage:

<ul>
    <li>
        <a href="#insufficient-memory-disk">Failure to start the application due to insufficient memory or disk space</a>
    </li>
</ul>

<div id="insufficient-memory-disk" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Failure to start the application due to insufficient memory or disk space</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>Tile installation</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>Application fails to start during the <code>Running errand deploy-all for Cloud Service Broker for Amazon AWS</code> step when applying changes</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>Insufficient resources in the app container</td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                        <li>Update default application memory and disk quota for all applications deployed by
                        TAS from within the TAS tile configuration. Go to <strong>App Developer Controls</strong> > <strong>Default app memory</strong> or <strong>App Developer Controls</strong> > <strong>Default disk quota per app</strong>.</li>
                        <li>Scale the current deployed application to use 1&nbsp;GB of memory and 2&nbsp;GB of disk from either
                        apps manager or the command line interface (CLI).
                        From apps manager, go to <strong>System</strong> > <strong>cloud-service-broker-space</strong> > <strong>cloud-service-broker-aws-VERSION</strong> and click the <strong>scale</strong> button.
                        From the CLI run:<br>
                        <code>
                        cf target -o system -s cloud-service-broker-space
                        cf scale cloud-service-broker-aws-1.4.1 -m 1G -k 2G
                        </code>
                        </li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

## <a id="common-services-errors"></a> Common Services Errors

The following errors can occur in multiple services:

<ul>
    <li>
        <a href="#recreate-instance-update-operation">Broker trying to recreate the instance when updating it</a>
    </li>
    <li>
        <a href="#recreate-instance-plan-change">Broker trying to recreate the instance when changing plan</a>
    </li>
</ul>

<div id="recreate-instance-update-operation" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when updating it</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>The update request for a field is failing because one of the following is true:
                <ul>
                <li>The field cannot be updated</li>
                <li>The new value for a property, or combination of properties, can cause an instance recreation</li>
                </ul>
                The failing update request might be an indication of an out-of-band update performed
                on the instance.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>An out-of-band upgrade of the Redis version to a later major version causes the
                broker to try to downgrade to the previous version, which causes instance recreation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                        <li>If the property can be updated, pass the parameter in the update
                        request to match the IaaS configuration.</li>
                        <li>If the property can be updated, but specified in the instance plan, then
                        possible solutions include:<br>
                            <ul>
                                <li>Rolling back the change in the IaaS</li>
                                <li>Changing the value in the instance plan</li>
                            </ul>
                        </li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="recreate-instance-plan-change" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when changing plan</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update plan</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code></td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                    The update request for the plan is failing because the new plan contains
                    incompatible property values.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>
                    Execute the plan update operation for Redis by setting a version of Redis earlier
                    than the previously created instance.
                    The downgrade of the version is not allowed because it involves the recreation of
                    the instance.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Update the instance to a plan with the compatible values.
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="rds-general-errors"></a> Amazon general RDS Errors

The following errors can occur in any Amazon RDS instance:

<ul>
    <li>
        <a href="#reaching-aws-subnets-quota">Reaching AWS subnets quota in a subnet group for RDS</a>
    </li>
</ul>

<div id="reaching-aws-subnets-quota" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td></td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>DBSubnetQuotaExceededFault</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  There is a resource quota for AWS called Subnets per DB subnet group that establishes the maximum
                  number of subnets per DB subnet group to each supported region to 20.
                  <br>
                  When operators/developers do not supply an existing subnet group in the plan or provision time,
                  the CSB creates a subnet group. The CSB adds all the present subnets in the specified VPC
                  to the new subnet group. For example, letâ€™s say the operator:
                    <ul>
                        <li>Specifies a VPC with 25 subnets through the tile.</li>
                        <li>Does not specify a DB subnet group in the plan.</li>
                        <li>Does not specify a DB subnet group at provisioning time.</li>
                    </ul>
                  Then the CSB creates a DB subnet group and adds <strong>all</strong> subnets, 25 in this example,
                  to the DB subnet group. Hence, this operation breaches the AWS resource quota.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Create a custom DB subnet group through the AWS console and add the desired subnets for RDS
                    instances to use. Then use the DB subnet group name as a plan or provision parameter.
                </td>
            </tr>
        </tbody>
    </table>
</div>
