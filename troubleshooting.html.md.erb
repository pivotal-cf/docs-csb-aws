---
title: Troubleshooting Cloud Service Broker for AWS
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic gives you troubleshooting information for <%= vars.product_full %>.

## <a id="troubleshoot-errors"></a> Troubleshoot errors

Start here if you have a specific error or error messages.

### <a id="common-services-errors"></a> Common services errors

The following errors can occur in multiple services:

<ul>
    <li>
        <a href="#recreate-instance-update-operation">Broker trying to recreate the instance when updating it</a>
    </li>
    <li>
        <a href="#recreate-instance-plan-change">Broker trying to recreate the instance when changing plan</a>
    </li>
</ul>

<div id="recreate-instance-update-operation" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when updating it</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>The update request for a field is failing because one of the following is true:
                <ul>
                <li>The field cannot be updated</li>
                <li>The new value for a property, or combination of properties, would cause an instance recreation</li>
                </ul>
                The failing update request might be an indication of an out-of-band update performed
                on the instance.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>An out-of-band upgrade of the Redis version to a newer major version causes the
                broker to try to downgrade to the previous version, which causes instance recreation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                        <li>If the property can be updated, pass the parameter in the update
                        request to match the IaaS configuration.</li>
                        <li>If the property can be updated, but specified in the instance plan, then
                        possible solutions include:<br>
                            <ul>
                                <li>Rolling back the change in the IaaS</li>
                                <li>Changing the value in the instance plan</li>
                            </ul>
                        </li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="recreate-instance-plan-change" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when changing plan</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update plan</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                    The update request for the plan is failing because the new plan contains
                    incompatible property values.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>
                    Execute the plan update operation for Redis by setting a version of Redis earlier
                    than the previously created instance.
                    The downgrade of the version is not allowed because it involves the recreation of
                    the instance.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Update the instance to a plan with the compatible values.
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="redis-errors"></a> Amazon ElastiCache for Redis errors

The following errors can occur in Amazon ElastiCache for Redis:

- [Invalid Parameter Group](#redis-invalid-parameter-group)
- [Snapshotting state while adding or removing nodes](#redis-scale-nodes-snapshotting)
- [Unable to create instance without specifying minor version (redis 7 only)](#redis-auto-minor-upgrade-version-7)

<div id="redis-invalid-parameter-group" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Invalid Parameter Group</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>InvalidParameterCombination</code></li>
                  <li><code>InvalidParameterValue</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The value of <code>parameter_group_name</code> points to a parameter group that is
                  not compatible with the version of Redis specified in <code>redis_version</code>.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                    <li>Set the <code>parameter_group_name</code> to <code>""</code> so that the default is used.</li>
                    <li>Set the <code>parameter_group_name</code> to a parameter group whose family matches the Redis version.</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="redis-scale-nodes-snapshotting" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Snapshotting state while adding or removing nodes</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:<br>
                  <code>unexpected state 'snapshotting', wanted target 'available'.</code>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  An AWS snapshot was started during the operation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Retry the operation.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="redis-auto-minor-upgrade-version-7" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Unable to create instance without specifying minor version (redis 7 only).</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>InvalidParameterCombination: Cannot find version 7.x for redis</code></li>
                  <li><code>engine_version: Redis versions must match `major.minor` when using version 6 or higher</code></li>.
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  There is an [underlying error in AWS API](https://github.com/hashicorp/terraform-provider-aws/issues/27918) preventing this scenario.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                    <li>Unfortunately there is no workaround. Specify a minor version when using Redis version 7 and set auto_minor_version_upgrade to false.</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="rds-general-errors"></a> Amazon general RDS errors

The following errors can occur in any Amazon RDS instance:

- [Reaching AWS subnets quota in a subnet group for RDS](#reaching-aws-subnets-quota)
- [Major engine version should be specified when auto_minor_version_upgrade is enabled](#engine-version-post-condition-failed)
- [Engine version not found when using a major version](#cannot-find-engine-version)
- [Incompatible network state](#incompatible-network-state)

<div id="reaching-aws-subnets-quota" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Reaching AWS subnets quota in a subnet group for RDS</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>DBSubnetQuotaExceededFault</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  There is a resource quota for AWS called Subnets per DB subnet group that establishes the maximum
                  number of subnets per DB subnet group to each supported region to 20.
                  <br>
                  When operators/developers do not supply an existing subnet group in the plan or provision time,
                  the CSB creates a subnet group. The CSB adds all the present subnets in the specified VPC
                  to the new subnet group. For example, let’s say the operator:
                    <ul>
                        <li>Specifies a VPC with 25 subnets through the tile.</li>
                        <li>Does not specify a DB subnet group in the plan.</li>
                        <li>Does not specify a DB subnet group at provisioning time.</li>
                    </ul>
                  Then the CSB creates a DB subnet group and adds <strong>all</strong> subnets, 25 in this example,
                  to the DB subnet group. Hence, this operation breaches the AWS resource quota.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Create a custom DB subnet group through the AWS console and add the desired subnets for RDS
                    instances to use. Then use the DB subnet group name as a plan or provision parameter.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="engine-version-post-condition-failed" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Major engine version should be specified when auto_minor_version_upgrade is enabled</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li>
                    <code>
                        Resource postcondition failed ............
                        ..........................................
                        A Major engine version should be specified when auto_minor_version_upgrade is enabled.
                        Expected engine version: x.x - got: x.x.x
                    </code>
                  </li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  A business rule prevents you from creating or updating an RDS instance with a configuration that
                  enables auto_minor_version_upgrade and does not select a major engine version. AWS automatically upgrades the minor versions, but you must pick a major version.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Create or update your RDS instance with either auto minor version upgrade deactivated or auto minor
                  version upgrade enabled but selecting a <strong>major engine version</strong>.
                  <br>
                  To know what is the major version, you can run the following command:
                  <code>
                    aws rds describe-db-engine-versions  --engine aurora-mysql --engine-version 5.7.mysql_aurora.2.02.3 --include-all --region us-west-2 | jq -r '.DBEngineVersions[] | { engine_version: .EngineVersion, major_version: .MajorEngineVersion }'
                  </code>
                    You should substitute the engine, aurora-mysql, and the engine version, 5.7.mysql_aurora.2.02.3, with the desired values.
                </td>
            </tr>
        </tbody>
    </table>
</div>


<div id="cannot-find-engine-version" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Engine version not found when using a major version</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                    <li>
                        <code>
                            InvalidParameterCombination: Cannot find version (minor engine version x.x.x) for (specific engine)
                        </code>
                    </li>
                    <li>Example: <code>InvalidParameterCombination: Cannot find version 8.0.mysql_aurora.3.04.0 for aurora-mysql</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The AWS API cannot eventually find a minor version within its catalog.
                  Various causes can induce this error, such as:
                    <ul>
                        <li>Limited version pool just before the release of a new minor version..</li>
                        <li>Eventual inconsistency between the read API and write API.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Create or update your RDS instance with auto minor version upgrade deactivated and select a
                  <strong>specific minor engine version</strong>.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="incompatible-network-state" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>incompatible-network state</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>incompatible-network</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  An incompatible-network state indicates one or more of the following is true of the Amazon RDS DB instance:
                    <ul>
                        <li>There are no available IP addresses in the subnet that the Amazon RDS DB instance was launched into.</li>
                        <li>The subnet used in the Amazon RDS DB subnet group no longer exists in the Amazon Virtual Private Cloud (Amazon VPC).</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Create a custom DB subnet group through the AWS console and choose subnets from the
                    navigation pane. Confirm that all subnets selected previously have available IP addresses.
                    Then use the DB subnet group name as a plan or provision parameter.
                </td>
            </tr>
        </tbody>
    </table>
</div>


### <a id="postgres-errors"></a> Amazon PostgreSQL errors

The following errors can occur in any Amazon PostgreSQL instance:

- [User does not have permission for table](#postgres-binding-issue)

<div id="postgres-binding-issue" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>User does not have permission for tables created by other user</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>Bindings modifyig/reading tables created by other bindings</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors mentioning lack of permissions/ownership:
                  <ul>
                  <li><code>must be owner of table</code></li>
                  <li><code>permission denied for table</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The CloudFoundry binding model implies that multiple bindings should be able to query
                  or modify the same tables. This is particularly useful for rotating credentials, where 
                  unbind and bind operations are needed. Additionally the broker currenlty does not support
                  creating bindings with different levels of access to the objects created. This all means that
                  all bindings should have the same access to all objects with ability to query and modify them regardless
                  of what binding created them in the first place.
                  This conflicts with PostgreSQL permission model, where the user that created an object is the owner
                  and hence the only one able to modify tables and query them, unless permission is explicitely give to other 
                  roles.
                  This applies for bindings as well as service keys.

                  <br>
                  More especifically the following issues can happen
                    <ul>
                        <li>Binding A not having access to a table that is created by binding B, when table is created after binding A was created.</li>
                        <li>Binding A not being able to change tables created by binding B, until binding B gets deleted (unbound from its app)</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                All the database users created when binding and creating service keys with the CSB for AWS are assigned the role `binding_user_group`. This implies
                they all have access to tables created by the `binding_user_group` role.
                Creating any objects with the `binding_user_group` role instead of the binding user will workaround any of the issues mentioned here.
                This can be achieve by executing `SET ROLE binding_user_group` before any other instruction in the sql script that creates your object or framework performing database migrations.
                
                If you are having issues with tables already created, you will need to either:
                
                1. Unbind the application that has created the objects and bind again (or delete the service key that has created the objects). 
                This is because when unbinding, the CSB automatically transfers ownership of existing objects to the `binding_user_group` role.
                
                2. Manuall transfer ownership to the binding_user_group with the following statement "ALTER TABLE tab_name OWNER TO binding_user_group;". 
                You will need to execute this statement logging in to the database with the credentials from the binding/service key used to create the objects. 
                
                3. If you only need other bindings to perform data operations, then you can create new bindings for interacting with these objects.
                This is because the CSB does assign permissions to all existing tables whenever a new binding is created. However this new bindings will still 
                not have permissions to perform DDL operations until points 1. or 2. are implemented. 
                </td>
            </tr>
        </tbody>
    </table>
</div>
