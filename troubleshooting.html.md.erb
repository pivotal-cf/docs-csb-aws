---
title: Troubleshooting Cloud Service Broker for AWS
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic gives you troubleshooting information for <%= vars.product_full %>.

## <a id="troubleshoot-errors"></a> Troubleshoot errors

Start here if you have a specific error or error messages.

### <a id="common-services-errors"></a> Common Services Errors

The following errors can occur in multiple services:

<ul>
    <li>
        <a href="#recreate-instance-update-operation">Broker trying to recreate the instance when updating it</a>
    </li>
    <li>
        <a href="#recreate-instance-plan-change">Broker trying to recreate the instance when changing plan</a>
    </li>
</ul>

<div id="recreate-instance-update-operation" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when updating it</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>The update request for a field is failing because one of the following is true:
                <ul>
                <li>The field cannot be updated</li>
                <li>The new value for a property, or combination of properties, would cause an instance recreation</li>
                </ul>
                The failing update request might be an indication of an out-of-band update performed
                on the instance.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>An out-of-band upgrade of the Redis version to a newer major version causes the
                broker to try to downgrade to the previous version, which causes instance recreation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                        <li>If the property can be updated, pass the parameter in the update
                        request to match the IaaS configuration.</li>
                        <li>If the property can be updated, but specified in the instance plan, then
                        possible solutions include:<br>
                            <ul>
                                <li>Rolling back the change in the IaaS</li>
                                <li>Changing the value in the instance plan</li>
                            </ul>
                        </li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="recreate-instance-plan-change" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Broker trying to recreate the instance when changing plan</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update plan</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>The instance status is <code>update failed</code> and the message is similar to<br>
                <code>update failed: Error: Instance cannot be destroyed on main.tf **** has
                lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed</code>.</td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                    The update request for the plan is failing because the new plan contains
                    incompatible property values.
                </td>
            </tr>
             <tr>
                <td>Examples</td>
                <td>
                    Execute the plan update operation for Redis by setting a version of Redis earlier
                    than the previously created instance.
                    The downgrade of the version is not allowed because it involves the recreation of
                    the instance.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Update the instance to a plan with the compatible values.
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="redis-errors"></a> Amazon ElastiCache for Redis Errors

The following errors can occur in Amazon ElastiCache for Redis:

<div id="redis-invalid-paramteter-group" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Invalid Parameter Group</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create or update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>InvalidParameterCombination</code></li>
                  <li><code>InvalidParameterValue</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The value of <code>parameter_group_name</code> points to a parameter group that is
                  not compatible with the version of Redis specified in <code>redis_version</code>.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ul>
                    <li>Set the <code>parameter_group_name</code> to <code>""</code> so that the default is used.</li>
                    <li>Set the <code>parameter_group_name</code> to a parameter group whose family matches the Redis version.</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="redis-scale-nodes-snapshotting" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Snapshotting state while adding or removing nodes</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:<br>
                  <code>unexpected state 'snapshotting', wanted target 'available'.</code>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  An AWS snapshot was started during the operation.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                  Retry the operation.
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="redis-mdl-not-installed" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Unbind or upgrade consistently fails</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>update</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:<br>
                  <code>unexpected state 'Error: Module not installed'</code>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  Misconfiguration on the tile causes the service offering to be incompatible with the
                  Terraform version installed for this broker.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    <ol>
                    <li>From the CLI, target the organization and space where the broker application is deployed by running <code>cf t -o system -s cloud-service-broker-space</code>.</li>
                    <li>Locate the app by running <code>cf apps</code> to ensure that you are in the right place. The app is named <code>cloud-service-broker-aws-1.5.1</code>.</li>
                    <li>Edit the environment variable for the app by running <code>cf set-env cloud-service-broker-aws-1.5.1 CSB_DISABLE_TF_UPGRADE_PROVIDER_RENAMES true</code>.</li>
                    <li>As advised by the CLI, restage the app by running <code>cf restage cloud-service-broker-aws-1.5.1</code>.</li>
                    <li>Run the operation again and verify that it works. Applying changes from <%= vars.ops_manager %> does not overwrite this change.</li>
                    </ol>
                    <br><br>
                    If you have instances of Redis created with previous versions of the broker, try
                    upgrading again because the earlier upgrade attempt might have failed when
                    installing the tile.<br>
                    You can apply changes again from <%= vars.ops_manager %>.
                    For more information, see
                    <a href="installing-with-aws.html.md.erb#upgrade-all-config">Upgrade All Service Instances Config</a>.<br>
                    Alternatively, you can run the <code>upgrade-all-services</code> CLI plug-in from the CLI.
                    For more information, see the <a href="https://plugins.cloudfoundry.org/#UpgradeAllServices">Cloud Foundry documentation.</a>
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="rds-general-errors"></a> Amazon general RDS Errors

The following errors can occur in any Amazon RDS instance:

<ul>
    <li>
        <a href="#reaching-aws-subnets-quota">Reaching AWS subnets quota in a subnet group for RDS</a>
    </li>
</ul>

<div id="reaching-aws-subnets-quota" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>Reaching AWS subnets quota in a subnet group for RDS</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>create</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors containing:
                  <ul>
                  <li><code>DBSubnetQuotaExceededFault</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  There is a resource quota for AWS called Subnets per DB subnet group that establishes the maximum
                  number of subnets per DB subnet group to each supported region to 20.
                  <br>
                  When operators/developers do not supply an existing subnet group in the plan or provision time,
                  the CSB creates a subnet group. The CSB adds all the present subnets in the specified VPC
                  to the new subnet group. For example, let’s say the operator:
                    <ul>
                        <li>Specifies a VPC with 25 subnets through the tile.</li>
                        <li>Does not specify a DB subnet group in the plan.</li>
                        <li>Does not specify a DB subnet group at provisioning time.</li>
                    </ul>
                  Then the CSB creates a DB subnet group and adds <strong>all</strong> subnets, 25 in this example,
                  to the DB subnet group. Hence, this operation breaches the AWS resource quota.
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                    Create a custom DB subnet group through the AWS console and add the desired subnets for RDS
                    instances to use. Then use the DB subnet group name as a plan or provision parameter.
                </td>
            </tr>
        </tbody>
    </table>
</div>

### <a id="postgres-errors"></a> Amazon PostgreSQL errors

The following errors can occur in any Amazon PostgreSQL instance:

- [User does not have permission for table](#postgres-binding-issue)

<div id="postgres-binding-issue" class="wrap-table-overflow">
    <table class="table">
        <tbody>
             <tr>
                <td>Error</td>
                <td>User does not have permission for tables created by other user in the PUBLIC schema</td>
             </tr>
             <tr>
                <td>Operation</td>
                <td>Bindings modifying/reading tables created by other bindings in the PUBLIC schema</td>
             </tr>
             <tr>
                <td>Symptom</td>
                <td>
                  Errors mentioning lack of permissions/ownership:
                  <ul>
                  <li><code>must be owner of table</code></li>
                  <li><code>permission denied for table</code></li>
                  </ul>
                </td>
            </tr>
            <tr>
                <td>Cause</td>
                <td>
                  The Cloud Foundry binding model implies that multiple bindings can query
                  or edit the same tables. This is particularly useful for rotating credentials where
                  unbind and bind operations are needed. Additionally, the broker does not support
                  creating bindings with different levels of access to the objects created. This means that
                  all bindings need the same access to all objects and can query and edit them regardless
                  of what binding created them in the first place.
                  This conflicts with the PostgreSQL permission model, where the user that created an object is the owner
                  and is the only one who can edit tables and query them, unless permission is explicitly granted to other
                  roles.
                  This applies for bindings and service keys.

                  <br>
                  Specifically, the following issues can happen:
                    <ul>
                        <li>Binding A not having access to a table that binding B created, when binding B created the table after binding A was created.</li>
                        <li>Binding A cannot read tables created by binding B until a new binding C is created.</li>
                        <li>Binding A cannot change tables created by binding B until binding B is deleted (unbound from its app).</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Solution</td>
                <td>
                All the database users created when binding and creating service keys with Tanzu Cloud Service Broker for AWS are assigned the role <code>binding_user_group</code>. This implies
                they all have access to tables created by the <code>binding_user_group</code> role.
                Creating any objects with the <code>binding_user_group</code> role instead of the binding user resolves any of the issues mentioned here.
                You can achieve this by running <code>SET ROLE binding_user_group</code> before any other instruction in the SQL script that creates your object or framework performing database migrations.

                If you have issues with tables already created, you must either:
                    <ol>
                        <li>Unbind the application that has created the objects and bind again (or delete the service key that has created the objects). This is because when unbinding, Tanzu Cloud Service Broker for AWS automatically transfers ownership of existing objects to the <code>binding_user_group</code> role.</li>
                        <li>Manually transfer ownership to the <code>binding_user_group</code> with the following statement "ALTER TABLE tab_name OWNER TO binding_user_group;". You must run this statement after logging in to the database with the credentials from the binding/service key used to create the objects.</li>
                        <li>If you only need other bindings to perform data operations, you can create new bindings for interacting with these objects. This is because Tanzu Cloud Service Broker for AWS assigns permissions to all existing tables whenever a new binding is created. However, this new binding does not have permissions to perform DDL operations until points 1. or 2. are implemented.</li>
                    </ol>
                </td>
            </tr>
        </tbody>
    </table>
</div>
