---
title: Amazon Aurora MySQL-Compatible Edition (Beta)
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

<p class="note important">
  <strong>Important:</strong> The Amazon Aurora MySQL-Compatible Edition service is in beta and is
  intended for evaluation and test purposes only. Do not use this service in a production environment.
</p>

This topic provides reference information about the
[Amazon Aurora MySQL-Compatible Edition](https://aws.amazon.com/rds/aurora/) (csb-aws-aurora-mysql)
service.
It describes the plans, configuration parameters, and binding credentials.

## <a id="plans-config"></a> Plan Configuration Parameters

When configuring <%= vars.product_short %> you can add additional plans.
For how to configure plans, see
[Configure Services with Cloud Service Broker for AWS](../installing-with-aws.html.md.erb#services).

The following table lists parameters that can only be configured for additional plans:

| Parameter Name       | Values                                                                                | Default   | Required |
|----------------------|---------------------------------------------------------------------------------------|-----------|----------|
| `name`               | The plan name                                                                         | _n/a_     | Yes      |
| `id`                 | A unique GUID                                                                         | _n/a_     | Yes      |
| `description`        | Description of the new plan                                                           | _n/a_     | Yes      |
| `display_name`       | Name to use when displaying the plan in Marketplace                                   | _n/a_     | No       |
| `free`               | When `false`, service instances of this service plan have a cost                      | `true`    | No       |
| `bindable`           | Specifies whether service instances of the service plan can bind to applications      | `true`    | No       |
| `plan_updateable`    | Whether the plan supports upgrading, downgrading, or sidegrading to another version   | `true`    | No       |

You can also add any of the parameters listed in the [Configuration Parameters](#parameters) section
to your plan.

<p class="note">
  <strong>Note:</strong> If you set a parameter at plan level, developers cannot change the value
  when creating or updating service instances.
</p>

## <a id="parameters"></a> Configuration Parameters

You can provision a service by running:

```console
cf create-service csb-aws-aurora-mysql PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}
```

You can update the configuration parameters for a service instance by running:

```console
cf update-service SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

The following table lists the parameters that you can configure, by using the `-c` flag, when
provisioning or updating a `csb-aws-aurora-mysql` service.
The Operation column displays whether a parameter is supported for both provision and update, or for
provision only:

<table class="nice">
  <thead>
    <tr>
      <th width="20%">Parameter Name</th>
      <th width="10%">Type</th>
      <th width="40%">Description</th>
      <th width="20%">Default</th>
      <th width="10%">Operation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>instance_name</code></td>
      <td>String</td>
      <td>The name of the AWS instance to create.</td>
      <td><code>csb-auroramy-INSTANCE-ID</code></td>
      <td>provision</td>
    </tr>
    <tr>
      <td><code>db_name</code></td>
      <td>String</td>
      <td>The name of the database.</td>
      <td><code>csbdb</code></td>
      <td>provision</td>
    </tr>
    <tr>
      <td><code>cluster_instances</code></td>
      <td>Integer</td>
      <td>The number of Aurora instances in the Aurora cluster.</td>
      <td><code>3</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>region</code></td>
      <td>String</td>
      <td>
        The AWS region to deploy the service in.
        For more information about available regions, see the
        <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">AWS documentation</a>.
      </td>
      <td><code>us-west-2</code></td>
      <td>provision</td>
    </tr>
    <tr>
      <td><code>serverless_min_capacity</code></td>
      <td>Number</td>
      <td>
        The minimum capacity for the cluster. Must be less than or equal to <code>serverless_max_capacity</code>. Valid capacity values are in a range of 0.5 up to 128, in steps of 0.5.</td>
      <td><code>null</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>serverless_max_capacity</code></td>
      <td>Number</td>
      <td>The maximum capacity for the cluster. Must be greater than or equal to <code>serverless_min_capacity</code>. Valid capacity values are in a range of 0.5 up to 128, in steps of 0.5.</td>
      <td><code>null</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>engine_version</code></td>
      <td>String</td>
      <td>The Aurora engine version, e.g. "8.0.mysql_aurora.3.02.0". Not all features are supported by all versions. Refer to the AWS documentation for more details..</td>
      <td><code>null</code> which results in the AWS default</td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>rds_subnet_group</code></td>
      <td>String</td>
       <td>The name of the subnet to attach the database instance to.</td>
      <td>None</td>
      <td>provision</td>
    </tr>
    <tr>
      <td><code>rds_vpc_security_group_ids</code></td>
      <td>Comma-separated String</td>
      <td>Security group IDs to assign to the database instance.</td>
      <td>None</td>
      <td>provision</td>
    </tr>
    <tr>
      <td><code>allow_major_version_upgrade</code></td>
      <td>Boolean</td>
      <td>Indicates that major version upgrades are allowed.
        Changing this parameter does not cause an outage and the change is
        asynchronously applied as soon as possible.</td>
      <td><code>true</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>auto_minor_version_upgrade</code></td>
      <td>Boolean</td>
      <td>Indicates that minor engine upgrades are applied automatically
        to the database instance during the maintenance window.</td>
      <td><code>true</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>deletion_protection</code></td>
      <td>Boolean</td>
      <td>
        Whether deletion protection is enabled. The DB cluster cannot be deleted when this value is set, but you can delete DB instances within the cluster.
        See documentation for more information about deleting Aurora DB cluster and DB instances https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_DeleteCluster.html#USER_DeletionProtection
      </td>
      <td><code>false</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>monitoring_interval</code></td>
      <td>Integer</td>
      <td>
        The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the database instance.
        To stop collecting Enhanced Monitoring metrics, enter <code>0</code>. Valid values: <code>0</code>, <code>1</code>, <code>5</code>, <code>10</code>, <code>15</code>, <code>30</code>, <code>60</code>.
        A <code>monitoring_role_arn</code> value is required if you enter a <code>monitoring_interval</code> value other than <code>0</code>.
      </td>
      <td><code>0</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>monitoring_role_arn</code></td>
      <td>Integer</td>
      <td>
        Enhanced Monitoring requires permission to act on your behalf to send OS metric information to CloudWatch Logs.
        This property represents the ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
      </td>
      <td><code>""</code></td>
    </tr>
    <tr>
      <td><code>db_cluster_parameter_group_name</code></td>
      <td>String</td>
      <td>
        The Aurora MySQL DB cluster parameter group name for the service.
      </td>
      <td><code>""</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>enable_audit_logging</code></td>
      <td>Boolean</td>
      <td>
        If <code>true</code>, it enables the <code>audit</code> <code>cloud_watch_log_export</code>
        on the DB cluster instances.
        It requires setting <code>db_cluster_parameter_group_name</code> with a pre-created DB cluster parameter group that fulfils
        requirements for audit log exports.
        For config options, see the
        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Auditing.html">AWS documentation</a>.
      </td>
      <td><code>false</code></td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>aws_access_key_id</code></td>
      <td>String</td>
      <td>The AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Access Key</strong> in <%= vars.ops_manager %>.</td>
      <td>provision and update</td>
    </tr>
    <tr>
      <td><code>aws_secret_access_key</code></td>
      <td>String</td>
      <td>The corresponding secret for the AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Secret Access Key</strong> in <%= vars.ops_manager %>.</td>
      <td>provision and update</td>
    </tr>
  </tbody>
</table>

## <a id="binding"></a> Binding

You can bind a service by running:

```console
cf bind-service APP-NAME SERVICE-INSTANCE-NAME --binding-name BINDING-NAME
```

The following table lists the parameters that you can configure, by using the `-c` flag, when
binding a `csb-aws-aurora-mysql` service:

<table class="nice">
  <thead>
    <tr>
      <th width="20%">Parameter Name</th>
      <th width="10%">Type</th>
      <th width="40%">Description</th>
      <th width="20%">Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>reader_endpoint</code></td>
      <td>Boolean</td>
      <td>Whether to return the Aurora reader endpoint, which is balanced across Reader and Writer instances. By default the writer endpoint is returned which maps only to the Writer instance. </td>
      <td><code>false</code></td>
    </tr>
  </tbody>
</table>

## <a id="binding-creds"></a> Binding Credentials

The format for binding credentials for Amazon Aurora MySQL-Compatible Edition is as follows:

```json
{
    "database" : "DATABASE-NAME",
    "hostname" : "DATABASE-SERVER-HOST",
    "port" : "DATABASE-SERVER-PORT",
    "username" : "AUTHENTICATION-USERNAME",
    "password" : "AUTHENTICATION-PASSWORD",
    "uri" : "DATABASE-CONNECTION-URI",
    "jdbcUrl" : "JDBC-FORMAT-CONNECTION-URL"
}
```
