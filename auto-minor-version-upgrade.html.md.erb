---
title: Auto Minor Version Upgrade on Cloud Service Broker for AWS
owner: Cloud Service Broker
---

## IaaS and Cloud Service Broker for AWS Engine Version Synchronization

### What Is Auto Minor Version Upgrade?

Auto Minor Version Upgrade is an AWS feature you can enable to have your
database automatically upgraded to a new approved minor engine version.

You can see when a minor version upgrade is scheduled to be applied to
your database instance in the AWS console. You can also choose to apply an
available minor version upgrade immediately through the AWS console.

### What Is the Current Problem Associated with Auto Minor Version Upgrade and Cloud Service Broker for AWS?

Auto minor version upgrade implies changes in the infrastructure managed by
VMware Tanzu Cloud Service Broker for AWS. These changes are out of
band, and Tanzu Cloud Service Broker for AWS does not perform
auto synchronizations with the IaaS. As a result, once the automatic upgrade happens in the
IaaS, the stored state of the infrastructure in Tanzu Cloud Service Broker for AWS differs from the current
infrastructure in AWS. This causes Tanzu Cloud Service Broker for AWS to try to update the
Amazon RDS instance with
the previous values whenever a Tanzu Cloud Service Broker for AWS upgrade or instance update occurs.

### When Does this Problem Happen?

This happens when updating or upgrading an RDS instance with auto minor version upgrade enabled and
a minor engine version selected.

From v1.6.0 of Tanzu Cloud Service Broker for AWS onwards, Tanzu Cloud Service Broker
for AWS forces selecting a major engine version when
enabling auto minor version upgrade. [See troubleshooting
page](troubleshooting.html.md.erb#engine-version-post-condition-failed).

However, instances created with the previous version of Tanzu Cloud Service Broker for AWS might already be out
of sync or configured in a way that allows this to happen.

### What Are the Necessary Steps to Avoid this Problem?

#### IaaS and Cloud Service Broker Synchronization

The state of the infrastructure managed by Tanzu Cloud Service Broker for AWS must be
synced with AWS. In other words, the engine version associated with a
service instance stored in Tanzu Cloud Service Broker for AWS must be the same as the one reflected on AWS. If
it is different, the version stored in Tanzu Cloud Service Broker for AWS must be a major engine version.

The engine version associated with a service instance stored in Tanzu Cloud Service Broker for AWS must be the same
as the one reflected on AWS. If it is different, the version stored in Tanzu Cloud Service Broker for AWS must be a Major Engine Version.

If the instance is already out of sync, you need to update the Tanzu Cloud Service Broker for AWS state with the actual configuration.
This means updating the engine version in Tanzu Cloud Service Broker for AWS to match the one in the IaaS.
You must also deactivate the `auto_minor_version_upgrade` flag to prevent this scenario from happening again:

```shell
cf update-service my-mysql-aurora-instance -c '{"auto_minor_version_upgrade": false, "engine_version": "5.7.mysql_aurora.2.02.3"}'
```

For more information, see [How to know whether the instance is out of sync section](#how-to-know-whether-the-instance-is-out-of-sync).

For example:

```shell
cf update-service my-mysql-aurora-instance -c '{"auto_minor_version_upgrade": false}'
```

If you configured the `engine_version` and `auto_minor_version_upgrade` flags as plan properties,
you must change the values of these properties in the plan and update the instance for the change to
take effect.

For example, if you created an RDS instance and the IaaS indicates the engine
version `5.7.mysql_aurora.2.02.3`, your plan must look like this:

```json
{
    "name":"my-custom-plan",
    "id":"10b2bd92-2a0b-11ed-b70f-cccrcf3xxxxx",
    "description":"My custom plan aurora-mysql",
    "auto_minor_version_upgrade": true,
    "engine_version": "5.7.mysql_aurora.2.02.3",
    "metadata": {
        "displayName": "My Custom Plan",
        "bullets": ["aurora-mysql", "5.7", "auto minor version upgrade enabled"]
    }
}
```

To update the instance, run:

```shell
cf update-service my-service-instance -c '{}'
```

>**Caution**
>Different service instances can have different minor engine
>versions, which requires creating different plans and updating each instance
>to use the corresponding plan.

If you created a different plan, you can change the service instance plan by running:

```shell
cf update-service my-service-instance -p instance_plan_name
```

##### Enable Auto Minor Version Upgrade

To enable an auto minor version upgrade, you must specify a **Major
Engine Version** and set the flag to true. If this is done through a plan, you
must update the instances afterwards.

If you created a new plan:

```shell
cf update-service my-service-instance -p instance_plan_name
```

```shell
cf update-service my-service-instance -c '{}'
```

If you updated the instance, run:

```shell
cf update-service my-service-instance -c '{"engine_version": "MAJOR_ENGINE_VERSION"}'
```

>**Caution**
>When specifying a major version, AWS selects the default engine version.
>AWS upgrades the RDS instance if the default engine version is greater than the current version.
>This upgrade is applied immediately, so you must carefully plan the operation to account for downtime.

To find out what the major version is for a given minor version, run:

```shell
aws rds describe-db-engine-versions  --engine ENGINE-NAME --engine-version ENGINE-VERSION --include-all --region REGION | jq -r '.DBEngineVersions[] | { engine_version: .EngineVersion, major_version: .MajorEngineVersion }'
....
....
# Result:
{
  "engine_version": "5.7.mysql_aurora.2.02.3",
  "major_version": "5.7"
}
```

Substitute `ENGINE-NAME` and `ENGINE-VERSION` with the values you want.

For supported engine values, see the Engine parameter in
[API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).

To find out what the actual engine version used in AWS is, run:

```shell
aws rds describe-db-instances --db-instance-identifier DB-INSTANCE-IDENTIFIER | jq -r '.DBInstances[] | .EngineVersion'
```

#### How to Know whether the Instance Is Out of Sync

If when you run the command to get the actual engine version in AWS, you receive a different version from the
one defined in the plan, then most likely the instance is out of sync.

When unsure, you can try to update the instance.

For example, say that you created an `aurora-mysql` instance with the `8.0.mysql_aurora.3.01.0` engine version
and AWS updated the instance to the `8.0.mysql_aurora.3.03.1` version.
Because an instance out of sync does not accept any update, if you update the service instance, you receive an error that contains:

`InvalidParameterCombination: Cannot upgrade ENGINE from AWS-ENGINE-VERSION to ORIGINAL-ENGINE-VERSION`

For example:

* Run an update without any parameter to force the update:

  ```shell
    cf update-service my_service_instance_name -c '{}'
  ```

* Error:

  ```shell
    InvalidParameterCombination: Cannot upgrade aurora-mysql from 8.0.mysql_aurora.3.03.1 to 8.0.mysql_aurora.3.01.0
  ```
