---
title: Auto Minor Version Upgrade feature on Cloud Service Broker for AWS
owner: Cloud Service Broker
---

## IaaS and CSB engine version synchronization

### What is Auto Minor Version Upgrade?

Auto Minor Version Upgrade is an AWS feature you can enable to have your database automatically
upgraded to a new approved minor engine version.


You can easily see when a minor version upgrade is scheduled to be applied to your database instance
in the AWS Console. You can also choose to apply an available minor version upgrade immediately
through the AWS console.

### What is the current problem associated with auto minor version upgrade and CSB?

Auto minor version upgrade implies changes in the infrastructure managed by our CSB product.
Because these changes are out-of-bands, and CSB does not perform auto synchronizations with the IaaS,
once the automatic upgrade happens in the IaaS, the stored state of the infrastructure in CSB will
differ from the current infrastructure in AWS. This causes CSB to try to update the RDS instance with
the previous values whenever a CSB upgrade or instance update occurs.

### When does this problem happen?

This happens when updating or upgrading an RDS instance with auto minor version upgrade enabled and
a minor engine version selected.

From this version onwards, CSB forces selecting a Major Engine Version when enabling auto minor version upgrade.
[See troubleshooting page](troubleshooting.html.md.erb#engine-version-post-condition-failed).

However, instances created with the previous version of CSB may already be out of sync or configured in a way
that allows this to happen.

### What are the necessary steps to avoid this problem?

#### IaaS and CSB synchronization

The engine version associated with a service instance stored in CSB must be the same
as the one reflected on AWS. If it is different, the version stored in CSB must be a Major Engine Version.

If the instance is already out of sync, you will need to update the CSB state with the actual configuration.
This means updating the engine version in the CSB to match the one in the IaaS.
You must also disable the `auto_minor_version_upgrade` flag to prevent this scenario from happening again.

Example:
```shell
cf update-service my-mysql-aurora-instance -c '{"auto_minor_version_upgrade": false, "engine_version": "5.7.mysql_aurora.2.02.3"}'
```

See [How to know whether the instance is out of sync section](#how-to-know-whether-the-instance-is-out-of-sync) for more information

If the instance is not yet out of sync, disable the flag to prevent future out-of-sync scenarios.

Example:

```shell
cf update-service my-mysql-aurora-instance -c '{"auto_minor_version_upgrade": false}'
```

If you configured the `engine_version` and/or `auto_minor_version_upgrade` flags as a plan properties,
you must change the values of these properties in the plan and update the instance for the change to
take effect.

For example, if you created an RDS instance and the IaaS indicates the engine
version `5.7.mysql_aurora.2.02.3`, your plan must look like this:

Your plan must look like this:

```json
{
    "name":"my-custom-plan",
    "id":"10b2bd92-2a0b-11ed-b70f-cccrcf3xxxxx",
    "description":"My custom plan aurora-mysql",
    "auto_minor_version_upgrade": true,
    "engine_version": "5.7.mysql_aurora.2.02.3",
    "metadata": {
        "displayName": "My Custom Plan",
        "bullets": ["aurora-mysql", "5.7", "auto minor version upgrade enabled"]
    }
}
```

For updating the instance, you can run

```shell
cf update-service my-service-instance -c '{}'
```

>**Warning** different service instances could have different minor engine versions,
>which will imply creating different plans and updating each instance to use the corresponding plan.

If you created a different plan, you can change the service instance plan by running

```shell
cf update-service my-service-instance -p instance_plan_name
```


##### Enable Auto Minor Version Upgrade

If you want to enable an auto minor version upgrade, you must specify a **Major Engine Version**
and set the flag to true. If this is done through a plan, you must update the instances afterwards.

If you created a new plan

```shell
cf update-service my-service-instance -p instance_plan_name
```


If you updated an existing plan:

```shell
cf update-service my-service-instance -c '{}'
```

If you update the instance

```shell
cf update-service my-service-instance -c '{"engine_version": "MAJOR_ENGINE_VERSION"}'
```

>**Warning** When specifying a major version, AWS will select the default engine version.
>AWS will upgrade the RDS instance if the default engine version is greater than the current version.
>This upgrade will be applied immediately, so you must carefully plan the operation to account for downtime.

If you want to know what the major version is for a given minor version, you can run

```shell
aws rds describe-db-engine-versions  --engine <ENGINE_NAME> --engine-version <ENGINE_VERSION> --include-all --region <REGION> | jq -r '.DBEngineVersions[] | { engine_version: .EngineVersion, major_version: .MajorEngineVersion }'
....
....
# Result:
{
  "engine_version": "5.7.mysql_aurora.2.02.3",
  "major_version": "5.7"
}
```

Substitute the engine `aurora-mysql` and the engine version `5.7.mysql_aurora.2.02.3` with the values you want.

For supported engine values, see the Engine parameter in
[API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).

To know what the actual engine version used in AWS is, you can run

```shell
aws rds describe-db-instances --db-instance-identifier <DB_INSTANCE_IDENTIFIER> | jq -r '.DBInstances[] | .EngineVersion' 
```

#### How to know whether the instance is out of sync

Let's imagine that you created an `aurora-mysql` instance with the `8.0.mysql_aurora.3.01.0` engine version
and AWS updated the instance to the `8.0.mysql_aurora.3.03.1` version.

Because an instance out of sync does not accept any update, if you update the service instance, you
will receive an error that contains:

`InvalidParameterCombination: Cannot upgrade <ENGINE> from <AWS_ENGINE_VERSION> to <ORIGINAL_ENGINE_VERSION>` 

Example:
* Run an update without any parameter to force the update
  
  ```shell
    cf update-service my_service_instance_name -c '{}'
  ```
* Error:
  ```shell
    InvalidParameterCombination: Cannot upgrade aurora-mysql from 8.0.mysql_aurora.3.03.1 to 8.0.mysql_aurora.3.01.0
   ```
